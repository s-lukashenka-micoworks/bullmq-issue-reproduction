const content = `--[[
  Get jobs belonging to a given group.
  Input:
    KEYS[1] key prefix
    KEYS[2] groupkey
    -- Arguments
    ARGV[1] group id
    ARGV[2] start
    ARGV[3] end
]]
local rcall = redis.call
-- Includes
--[[
  Get jobs belonging to a given group.
]]
local function concatTable(firstTable, secondTable)
    for _,value in ipairs(secondTable) do
        table.insert(firstTable, value)
    end
end
local function getGroup(groupKey, groupId, prefixKey, start, endIndex)
    endIndex = tonumber(endIndex)
    local startIndex = tonumber(start)
    local groupLen = rcall("LLEN", groupKey)
    local lastIndex
    if groupLen > 0 then
        lastIndex = groupLen - 1
    else
        lastIndex = 0
    end
    local jobIds = rcall("LRANGE", groupKey, start, endIndex)
    local prioritizedJobIds
    if endIndex == -1 then
        if startIndex > lastIndex then
            prioritizedJobIds = rcall("ZRANGE", groupKey .. ":p", startIndex - lastIndex, -1)
        else
            prioritizedJobIds = rcall("ZRANGE", groupKey .. ":p", 0, -1)
        end
        concatTable(jobIds, prioritizedJobIds)
    elseif endIndex > lastIndex then
        if startIndex > lastIndex then
            prioritizedJobIds = rcall("ZRANGE", groupKey .. ":p", startIndex - lastIndex,
              endIndex - lastIndex)
        else
            prioritizedJobIds = rcall("ZRANGE", groupKey .. ":p", 0,
              endIndex - lastIndex)
        end
        concatTable(jobIds, prioritizedJobIds)
    end    
    return jobIds
end
return getGroup(KEYS[2], ARGV[1], KEYS[1], ARGV[2], ARGV[3])
`;
export const getGroup = {
    name: 'getGroup',
    content,
    keys: 2,
};
//# sourceMappingURL=getGroup-2.js.map