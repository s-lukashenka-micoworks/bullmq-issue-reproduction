--[[
  Delete jobs belonging to a given group.
]]

-- Includes
--- @include "<base>/includes/removeListJobs"
--- @include "<base>/includes/removeZSetJobs"

local function deleteGroup(groupsKey, groupKey, groupId, prefixKey, limit)
  local remainingLimit = removeListJobs(groupKey, true, prefixKey, limit)

  if remainingLimit > 0 then
    remainingLimit = removeZSetJobs(groupKey .. ":p", true, prefixKey, remainingLimit)
  end

  local jobsLeft = rcall("LLEN", groupKey)
  local prioritizedJobsLeft = rcall("ZCARD", groupKey .. ":p")
  if jobsLeft == 0 and prioritizedJobsLeft == 0 then
    local groupsRateLimitKey = groupsKey .. ':limit'
    local groupsMaxConcurrencyKey = groupsKey .. ':max'
    local groupsPausedKey = groupsKey .. ':paused'

    rcall("ZREM", groupsKey, groupId)
    rcall("ZREM", groupsRateLimitKey, groupId)
    rcall("ZREM", groupsMaxConcurrencyKey, groupId)
    rcall("ZREM", groupsPausedKey, groupId)
    rcall("HDEL", groupsKey .. ":pc", groupId)
    rcall("HDEL", groupsKey .. ":concurrency", groupId)
  end

  return limit - remainingLimit, jobsLeft + prioritizedJobsLeft
end
