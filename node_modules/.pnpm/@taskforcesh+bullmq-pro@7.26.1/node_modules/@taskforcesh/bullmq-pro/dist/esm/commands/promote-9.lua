--[[
  Promotes a job that is currently "delayed" to the "waiting" state

    Input:
      KEYS[1] 'delayed'
      KEYS[2] 'wait'
      KEYS[3] 'paused'
      KEYS[4] 'meta'
      KEYS[5] 'prioritized'
      KEYS[6] 'active'
      KEYS[7] 'pc' priority counter
      KEYS[8] 'event stream'
      KEYS[9] 'marker'

      ARGV[1]  queue.toKey('')
      ARGV[2]  jobId

    Events:
      'waiting'
]]
local rcall = redis.call;
local jobId = ARGV[2]

-- Includes
--- @include "<base>/includes/addJobInTargetList"
--- @include "<base>/includes/getTargetQueueList"
--- @include "includes/addJobWithPriority"
--- @include "includes/addToGroup"

if rcall("ZREM", KEYS[1], jobId) == 1 then
  local jobKey = ARGV[1] .. jobId
  local jobAttributes = rcall("HMGET", jobKey, "priority", "gid")
  local priority = tonumber(jobAttributes[1]) or 0
  local target, isPausedOrMaxed = getTargetQueueList(KEYS[4], KEYS[6], KEYS[2], KEYS[3])

  -- Remove delayed "marker" from the wait list if there is any.
  -- Since we are adding a job we do not need the marker anymore.
  local marker = rcall("LINDEX", target, 0)
  if marker and string.sub(marker, 1, 2) == "0:" then
    rcall("LPOP", target)
  end

  local markerKey = KEYS[9]
  if jobAttributes[2] then
    addToGroup(false, ARGV[1], jobAttributes[2], jobId, markerKey, priority, isPausedOrMaxed, false)
  elseif priority == 0 then
    -- LIFO or FIFO
    addJobInTargetList(target, markerKey, "LPUSH", isPausedOrMaxed, jobId)
  else
    addJobWithPriority(markerKey, KEYS[5], priority, jobId, KEYS[7], isPausedOrMaxed, nil)
  end

  -- Emit waiting event (wait..ing@token)
  rcall("XADD", KEYS[8], "*", "event", "waiting", "jobId", jobId, "prev", "delayed");

  rcall("HSET", jobKey, "delay", 0)

  return 0
else
  return -3
end