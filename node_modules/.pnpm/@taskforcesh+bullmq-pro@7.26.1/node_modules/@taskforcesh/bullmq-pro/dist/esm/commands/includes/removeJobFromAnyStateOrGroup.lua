--[[
  Function to remove from any state.

  returns:
    prev state
]]

-- Includes
--- @include "<base>/includes/removeJobFromAnyState"
--- @include "decreaseGroupConcurrency"
--- @include "getGroupCount"

local function removeJobFromAnyStateOrGroup( prefix, markerKey, paused, jobId, groupId)
  local state = removeJobFromAnyState(prefix, jobId)
  if groupId ~= false then
    if state == "unknown" then
      local groupKey = prefix .. "groups:" .. groupId
      local groupPriorityKey = groupKey .. ":p"
      if rcall("LREM", groupKey, 0, jobId) == 1 then
        local groupLen = getGroupCount(groupId, prefix)
        if groupLen == 0 then
          local groupsKey = prefix .. "groups"
          rcall("ZREM", groupsKey, groupId)
        end
        if rcall("ZSCORE", prefix .. "groups:paused", groupId) ~= false then
          return "paused"
        else
          return "wait"
        end
      elseif rcall("ZREM", groupKey .. ":p", jobId) == 1 then
        local groupLen = getGroupCount(groupId, prefix)
        if groupLen == 0 then
          local groupsKey = prefix .. "groups"
          rcall("ZREM", groupsKey, groupId)
        end
        if rcall("ZSCORE", prefix .. "groups:paused", groupId) ~= false then
          return "paused"
        else
          return "prioritized"
        end
      end
    end

    if state == "active" then
      -- we assume 999999 as inf concurrency.
      decreaseGroupConcurrency(prefix, markerKey, paused, groupId, 999999)
    end
  end

  return state
end
