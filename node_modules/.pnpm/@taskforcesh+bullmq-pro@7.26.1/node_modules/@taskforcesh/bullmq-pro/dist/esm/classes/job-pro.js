import { Job, array2obj, PRIORITY_LIMIT } from 'bullmq';
import { ScriptsPro } from '../classes/scripts-pro';
/**
 * @see {@link bullmq!Job | Job}
 */
export class JobPro extends Job {
    constructor(queue, 
    /**
     * The name of the Job
     */
    name, 
    /**
     * The payload for this job.
     */
    data, 
    /**
     * The options object for this job.
     */
    opts = {}, id) {
        var _a;
        super(queue, name, data, opts, id);
        this.queue = queue;
        this.id = id;
        this.gid = (_a = opts.group) === null || _a === void 0 ? void 0 : _a.id;
    }
    setScripts() {
        this.scripts = new ScriptsPro(this.queue);
    }
    /**
     * Instantiates a JobPro instance based on a standard Job instance.
     * @param job -
     */
    static fromJob(queue, job) {
        const jobPro = new JobPro(queue, job.name, job.data, job.opts, job.id);
        return jobPro;
    }
    /**
     * Instantiates a Job from a JobJsonRaw object (coming from a deserialized JSON object)
     *
     * @param queue - the queue where the job belongs to.
     * @param json - the plain object containing the job.
     * @param jobId - an optional job id (overrides the id coming from the JSON object)
     * @returns
     */
    static fromJSON(queue, json, jobId) {
        const job = super.fromJSON(queue, json, jobId);
        job.gid = json.gid;
        return job;
    }
    validateOptions(jobData) {
        var _a;
        super.validateOptions(jobData);
        if (this.opts.group && this.opts.priority) {
            throw new Error(`Priority and Group options can not be used together. Try group.priority option`);
        }
        if ((_a = this.opts.group) === null || _a === void 0 ? void 0 : _a.priority) {
            if (Math.trunc(this.opts.group.priority) !== this.opts.group.priority) {
                throw new Error(`Group.priority should not be float`);
            }
            if (this.opts.group.priority > PRIORITY_LIMIT) {
                throw new Error(`Group.priority should be between 0 and ${PRIORITY_LIMIT}`);
            }
        }
    }
    /**
     * Prepares a job to be passed to Sandbox.
     * @returns
     */
    asJSONSandbox() {
        const json = super.asJSONSandbox();
        return Object.assign(Object.assign({}, json), { gid: this.gid });
    }
    /**
     * Moves a job to the completed queue.
     * Returned job to be used with Queue.prototype.nextJobFromJobData.
     *
     * @param returnValue - The jobs success message.
     * @param token - Worker token used to acquire completed job.
     * @param fetchNext - True when wanting to fetch the next job.
     * @returns Returns the jobData of the next job in the waiting queue.
     */
    async moveToCompleted(returnValue, token, fetchNext = true) {
        if (this.batch) {
            return this.moveBatchToCompleted(this.batch, token, fetchNext);
        }
        return super.moveToCompleted(returnValue, token, fetchNext);
    }
    /**
     * Moves a batch of jobs to the complete set.
     * @param batch -
     * @returns The next batch of jobs if any wrapped in a batch job.
     */
    async moveBatchToCompleted(batch, token, fetchNext) {
        const failedJobs = batch.filter(job => !!job.failedError);
        const completedJobs = batch.filter(job => !job.failedError);
        for (let i = 0; i < failedJobs.length; i++) {
            const job = failedJobs[i];
            await job.moveToFailed(job.failedError, token, false);
        }
        try {
            const client = await this.queue.client;
            // Todo examine results and throw if needed
            const nextBatch = await this.scripts.moveToBatchFinished(client, completedJobs, 'returnvalue', 'completed', token, Date.now(), fetchNext);
            if (nextBatch) {
                // check next batch
                if (Array.isArray(nextBatch[0])) {
                    const jobs = [];
                    const rawJobs = nextBatch[0];
                    for (let i = 0; i < rawJobs.length; i++) {
                        jobs.push(array2obj(rawJobs[i]));
                    }
                    return [
                        jobs.length ? jobs : undefined,
                        nextBatch[1],
                        nextBatch[2],
                        nextBatch[3],
                    ];
                }
                // Check if there were errors
                for (let i = 0; i < nextBatch.length; i++) {
                    if (typeof nextBatch[i] === 'number') {
                        if (nextBatch[i] < 0) {
                            this.queue.emit('error', this.scripts.finishedErrors({
                                code: nextBatch[i],
                                jobId: batch[i].id,
                                command: 'completed',
                                state: 'active',
                            }));
                        }
                    }
                }
            }
        }
        catch (err) {
            this.queue.emit('error', err);
        }
    }
    /**
     * Moves a batch of jobs to the failed set.
     * @param err -
     * @param token -
     * @param batch -
     */
    async moveBatchToFailed(err, token, batch) {
        // As failing is a unusual operation, we do not need to perform the
        // call to the moveToFinished script in 1 command.
        const failedJobs = [];
        for (let i = 0; i < batch.length; i++) {
            const job = batch[i];
            failedJobs.push(job.moveToFailed(err, token, false));
        }
        await Promise.all(failedJobs);
    }
    /**
     * Moves a job to the failed queue.
     *
     * @param err - the jobs error message.
     * @param token - token to check job is locked by current worker
     * @param fetchNext - true when wanting to fetch the next job
     * @returns void
     */
    async moveToFailed(err, token, fetchNext = false) {
        if (this.batch) {
            return this.moveBatchToFailed(err, token, this.batch);
        }
        return super.moveToFailed(err, token, fetchNext);
    }
    /**
     * Sets a batch of jobs for this job.
     *
     */
    setBatch(jobs) {
        this.batch = jobs;
    }
    /**
     * Returns the batch of jobs for this job if any.
     *
     * @returns
     * @see {@link bullmq!Job | Job}
     * @see {@link bullmq!JobPro | JobPro}
     *
     * @example
     * ```typescript
     *
     *
     * ```
     */
    getBatch() {
        return this.batch;
    }
    /**
     * Set job as failed. This method will set the current job instance as failed,
     * it is useful when processing batches to mark a certain job in a batch as failed
     * while completing the rest.
     * @param err - The error object to be associated with the job.
     */
    setAsFailed(err) {
        this.failedError = err;
    }
    async extendLock(token, duration) {
        if (this.batch) {
            const multi = (await this.queue.client).multi();
            for (let i = 0; i < this.batch.length; i++) {
                const job = this.batch[i];
                job.extendLock(token, duration);
            }
            const result = await multi.exec();
            const anyError = false;
            for (let i = 0; i < result.length; i++) {
                const [err, code] = result[i];
                if (err) {
                    this.queue.emit('error', err);
                }
                else if (code !== 1) {
                    this.queue.emit('error', new Error(`Error extending lock for job: ${this.batch[i].id}`));
                }
            }
            return anyError ? 0 : 1;
        }
        else {
            return super.extendLock(token, duration);
        }
    }
}
//# sourceMappingURL=job-pro.js.map