-- Includes
--- @include "increaseGroupConcurrency"
--- @include "moveJobFromPrioritizedToActive"
--- @include "rateLimitGroup"
--- @include "reinsertGroupIfNeeded"

local function moveJobToActiveFromGroup(prefixKey, activeKey, groupMaxConcurrency,
  groupLimit, groupLimitDuration, timestamp)
  local groupsKey = prefixKey .. 'groups'
  local jobId

  -- Try to fetch next group's jobs
  local groupIds = rcall("ZPOPMIN", groupsKey)
  if #groupIds > 0 then
    local groupId = groupIds[1]
    local groupKey = groupsKey .. ':' .. groupId
    jobId = rcall("RPOPLPUSH", groupKey, activeKey)

    if not jobId then
      jobId = moveJobFromPrioritizedToActive(groupKey .. ":p", activeKey, groupKey .. ":pc", groupId)
    end

    -- Handle maxGroupConcurrency
    if groupMaxConcurrency and jobId then
      if increaseGroupConcurrency(groupsKey, groupId, groupMaxConcurrency, timestamp) then
        return jobId
      end
    end

    if groupLimit and jobId then
      if rateLimitGroup(prefixKey, groupId, groupLimit, groupLimitDuration, timestamp) then
        return jobId
      end
    end

    reinsertGroupIfNeeded(groupKey, groupsKey, groupId)
    rcall("SET", prefixKey .. 'groups-lid', groupId)
  end

  return jobId
end
