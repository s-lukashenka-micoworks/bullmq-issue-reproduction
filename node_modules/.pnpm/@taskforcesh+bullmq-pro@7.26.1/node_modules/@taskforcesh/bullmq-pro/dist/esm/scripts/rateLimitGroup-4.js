const content = `--[[
  Function to dynamically rate limit a group.
  Note:
  This function is designed to be called from inside a worker processor
  when a job is being processed and the group it belongs to must be rate limited.
  Input:
    KEYS[1] group key
    KEYS[2] group rate limit key
    KEYS[3] groupsKey
    KEYS[4] groupsRateLimitKey
    ARGV[1] expirationTimeMs
    ARGV[2] timestamp
    ARGV[3] group id
]]
local rcall = redis.call
local groupId = ARGV[3]
local groupKey = KEYS[1]
local groupsKey = KEYS[3]
-- Update the max key for the group
-- We can use max concurrency 99999 because by definition, if we decrease the concurrency
-- we will stop being maxed out.  
-- Mark this group has being rate limited.
local expirationTimeMs = tonumber(ARGV[1])
local timestamp = tonumber(ARGV[2])
local nextTimestamp = timestamp + expirationTimeMs
local groupRateLimitKey = KEYS[2]
-- Set the rate limit key for the group
rcall("SET", groupRateLimitKey, 999999, "PX", expirationTimeMs)
-- Since this group is rate limited, remove it from the groupsKey and
-- add it to the limit set.
rcall("ZREM", groupsKey, groupId)
local groupsRateLimitKey = KEYS[4]
rcall("ZADD", groupsRateLimitKey, nextTimestamp, groupId)
`;
export const rateLimitGroup = {
    name: 'rateLimitGroup',
    content,
    keys: 4,
};
//# sourceMappingURL=rateLimitGroup-4.js.map