--[[
  Promote a rate-limited group (if any) so that it is not rate limited anymore
]]

-- Includes
--- @include "<base>/includes/addBaseMarkerIfNeeded"
--- @include "reinsertGroupIfNotMaxedOrPaused"
local function promoteRateLimitedGroups(prefixKey, markerKey, timestamp, paused)
    local groupsRateLimitKey = prefixKey .. 'groups:limit'
    local groupIds = rcall("ZPOPMIN", groupsRateLimitKey)
    if #groupIds > 0 then
        -- Is the group really limited?
        local groupRateLimitKey = prefixKey .. 'groups:' .. groupIds[1] ..
                                      ':limit'
        local jobCounter = tonumber(rcall("GET", groupRateLimitKey))

        local groupId = groupIds[1]

        if not jobCounter or jobCounter < 999999 then
            -- Group is not rate limited anymore so we promote it
            if reinsertGroupIfNotMaxedOrPaused(prefixKey, groupId) then
                addBaseMarkerIfNeeded(markerKey, paused)
                return 0, 0
            else
                return promoteRateLimitedGroups(prefixKey, markerKey, timestamp, paused)
            end
        else
            -- remove the key manually if ttl is zero to avoid side effects.
            local ttl = tonumber(rcall("PTTL", groupRateLimitKey))
            if ttl == 0 then rcall("DEL", groupRateLimitKey) end

            -- Group is still rate limited, re-add with new score
            local nextTimestamp = timestamp + ttl
            rcall("ZADD", groupsRateLimitKey, nextTimestamp, groupId)
            return nextTimestamp, ttl
        end
    end

    return 0, 0
end
