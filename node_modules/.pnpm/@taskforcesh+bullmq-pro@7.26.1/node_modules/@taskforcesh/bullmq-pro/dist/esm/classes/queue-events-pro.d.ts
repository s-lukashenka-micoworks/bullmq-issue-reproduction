import { QueueEvents, QueueEventsOptions, QueueEventsListener } from 'bullmq';
/**
 * @see {@link bullmq!QueueEventsListener | QueueEventsListener}
 */
export interface QueueEventsListenerPro extends QueueEventsListener {
    /**
     * Listen to 'groups:paused' event.
     *
     * This event is triggered when a group is paused.
     */
    'groups:paused': (args: {
        groupId: string;
    }, id: string) => void;
    /**
     * Listen to 'groups:resumed' event.
     *
     * This event is triggered when a group is resumed.
     */
    'groups:resumed': (args: {
        groupId: string;
    }, id: string) => void;
}
type CustomParameters<T> = T extends (...args: infer Args) => void ? Args : never;
type KeyOf<T extends object> = Extract<keyof T, string>;
/**
 * @see {@link bullmq!QueueEvents | QueueEvents}
 */
export declare class QueueEventsPro extends QueueEvents {
    constructor(name: string, opts?: QueueEventsOptions);
    emit<QEL extends QueueEventsListener = QueueEventsListenerPro, U extends KeyOf<QEL> = KeyOf<QEL>>(event: U, ...args: CustomParameters<QEL[U]>): boolean;
    off<QEL extends QueueEventsListener = QueueEventsListenerPro, U extends KeyOf<QEL> = KeyOf<QEL>>(eventName: U, listener: QEL[U]): this;
    on<QEL extends QueueEventsListener = QueueEventsListenerPro, U extends KeyOf<QEL> = KeyOf<QEL>>(event: U, listener: QEL[U]): this;
    once<QEL extends QueueEventsListener = QueueEventsListenerPro, U extends KeyOf<QEL> = KeyOf<QEL>>(event: U, listener: QEL[U]): this;
}
export {};
