--[[
  Move job from active to a finished status (completed o failed)
  A job can only be moved to completed if it was active.
  The job must be locked before it can be moved to a finished status,
  and the lock must be released in this script.

     Input:
      KEYS[1] wait key
      KEYS[2] active key
      KEYS[3] prioritized key
      KEYS[4] stream events key
      KEYS[5] stalled key

      -- Rate limiting
      KEYS[6] rate limiter key
      KEYS[7] delayed key

      KEYS[8] paused key
      KEYS[9] meta key
      KEYS[10] pc priority counter
      KEYS[11] completed/failed key
      KEYS[12] jobId key
      KEYS[13] metrics key
      KEYS[14] marker key

      ARGV[1]  jobId
      ARGV[2]  timestamp
      ARGV[3]  msg property
      ARGV[4]  return value / failed reason
      ARGV[5]  target (completed/failed)
      ARGV[6]  fetch next?
      ARGV[7]  keys prefix
      ARGV[8]  opts
      ARGV[9]  job fields to update

     Output:
      0 OK
      -1 Missing key.
      -2 Missing lock.
      -3 Job not in active set
      -4 Job has pending dependencies
      -6 Lock is not owned by this client

     Events:
      'completed/failed'
]]
local rcall = redis.call

local waitKey = KEYS[1]
local activeKey = KEYS[2]

local prioritizedKey = KEYS[3]
local eventStreamKey = KEYS[4]
local stalledKey = KEYS[5]

local finishedKey = KEYS[11]
local jobIdKey = KEYS[12]
local metaKey = KEYS[9]

local timestamp = ARGV[2]

local prefixKey = ARGV[7]

-- Includes
--- @include "<base>/includes/collectMetrics"
--- @include "<base>/includes/destructureJobKey"
--- @include "<base>/includes/getRateLimitTTL"
--- @include "<base>/includes/getTargetQueueList"
--- @include "<base>/includes/moveParentFromWaitingChildrenToFailed"
--- @include "<base>/includes/removeDeduplicationKeyIfNeeded"
--- @include "<base>/includes/removeJobsByMaxAge"
--- @include "<base>/includes/removeJobsByMaxCount"
--- @include "<base>/includes/removeLock"
--- @include "<base>/includes/removeJobKeys"
--- @include "<base>/includes/removeParentDependencyKey"
--- @include "<base>/includes/trimEvents"
--- @include "<base>/includes/updateJobFields"
--- @include "includes/decreaseGroupConcurrency"
--- @include "includes/fetchNextJob"
--- @include "includes/moveParentToWaitIfNeeded"
--- @include "includes/promoteDelayedJobs"
--- @include "includes/promoteRateLimitedGroups"
--- @include "includes/updateParentDepsIfNeeded"

if rcall("EXISTS", jobIdKey) == 1 then -- // Make sure job exists
    local markerKey = KEYS[14]
    local opts = cmsgpack.unpack(ARGV[8])

    local token = opts['token']

    local errorCode = removeLock(jobIdKey, KEYS[5], token, ARGV[1])
    if errorCode < 0 then
        return errorCode
    end

    updateJobFields(jobIdKey, ARGV[9]);

    local lockDuration = opts['lockDuration']
    local attempts = opts['attempts']
    local maxMetricsSize = opts['maxMetricsSize']

    if rcall("SCARD", jobIdKey .. ":dependencies") ~= 0 then -- // Make sure it does not have pending dependencies
        return -4
    end

    local jobAttributes = rcall("HMGET", jobIdKey, "parentKey", "parent", "deid")
    local parentKey = jobAttributes[1] or ""
    local parentId = ""
    local parentQueueKey = ""
    if jobAttributes[2] ~= false then
        local jsonDecodedParent = cjson.decode(jobAttributes[2])
        parentId = jsonDecodedParent['id']
        parentQueueKey = jsonDecodedParent['queueKey']
    end

    local jobId = ARGV[1]
    local timestamp = ARGV[2]

    -- Remove from active list (if not active we shall return error)
    local numRemovedElements = rcall("LREM", activeKey, -1, jobId)
    if (numRemovedElements < 1) then
        return -3
    end

    local target, isPausedOrMaxed = getTargetQueueList(metaKey, activeKey, waitKey, KEYS[8])

    -- Trim events before emiting them to avoid trimming events emitted in this script
    trimEvents(metaKey, eventStreamKey)

    removeDeduplicationKeyIfNeeded(prefixKey, jobAttributes[3])

    -- Update the active group count and set.
    local jobKey = prefixKey .. jobId
    local groupId = rcall("HGET", jobKey, "gid")

    if groupId then
        local maxConcurrency = opts['group'] and opts['group']['concurrency']
        decreaseGroupConcurrency(prefixKey, markerKey, isPausedOrMaxed, groupId, maxConcurrency or 999999)
    end

    -- If job has a parent we need to 
    -- 1) remove this job id from parents dependencies
    -- 2) move the job Id to parent "processed" set
    -- 3) push the results into parent "results" list
    -- 4) if parent's dependencies is empty, then move parent to "wait/paused". Note it may be a different queue!.
    -- NOTE: Priorities not supported yet for parent jobs.

    -- local parentQueueKey = ARGV[13]
    if parentId == "" and parentKey ~= "" then
        parentId = getJobIdFromKey(parentKey)
        parentQueueKey = getJobKeyPrefix(parentKey, ":" .. parentId)
    end
    if parentId ~= "" then
        if ARGV[5] == "completed" then
            local dependenciesSet = parentKey .. ":dependencies"
            if rcall("SREM", dependenciesSet, jobIdKey) == 1 then
                updateParentDepsIfNeeded(parentKey, parentQueueKey, dependenciesSet, parentId, jobIdKey, ARGV[4],
                    timestamp)
            end
        else
            if opts['fpof'] then
                moveParentFromWaitingChildrenToFailed(parentQueueKey, parentKey, parentId, jobIdKey, timestamp)
            elseif opts['idof'] or opts['rdof'] then
                local dependenciesSet = parentKey .. ":dependencies"
                if rcall("SREM", dependenciesSet, jobIdKey) == 1 then
                    moveParentToWaitIfNeeded(parentQueueKey, dependenciesSet, parentKey, parentId, timestamp)
                    if opts['idof'] then
                        local failedSet = parentKey .. ":failed"
                        rcall("HSET", failedSet, jobIdKey, ARGV[4])
                    end
                end
            end
        end
    end

    -- Remove job?
    local maxCount = opts['keepJobs']['count']
    local maxAge = opts['keepJobs']['age']

    local attemptsMade = rcall("HINCRBY", jobIdKey, "atm", 1)

    if maxCount ~= 0 then
        -- Add to complete/failed set
        rcall("ZADD", finishedKey, timestamp, jobId)
        rcall("HMSET", jobIdKey, ARGV[3], ARGV[4], "finishedOn", timestamp)
        -- "returnvalue" / "failedReason" and "finishedOn"

        -- Remove old jobs?
        if maxAge ~= nil then
            removeJobsByMaxAge(timestamp, maxAge, finishedKey, prefixKey)
        end

        if maxCount ~= nil and maxCount > 0 then
            removeJobsByMaxCount(maxCount, finishedKey, prefixKey)
        end
    else
        removeJobKeys(jobIdKey)
        if parentKey ~= "" then
            removeParentDependencyKey(jobIdKey, false, parentKey, jobAttributes[3])
        end
    end

    rcall("XADD", eventStreamKey, "*", "event", ARGV[5], "jobId", jobId, ARGV[3], ARGV[4])

    if ARGV[5] == "failed" then
        if tonumber(attemptsMade) >= tonumber(attempts) then
            rcall("XADD", eventStreamKey, "*", "event", "retries-exhausted", "jobId", jobId, "attemptsMade",
                attemptsMade)
        end
    end

    -- Collect metrics
    if maxMetricsSize ~= "" then
        collectMetrics(KEYS[13], KEYS[13] .. ':data', maxMetricsSize, timestamp)
    end

    local rateLimitedNextTtl = promoteRateLimitedGroups(prefixKey, markerKey, timestamp, isPausedOrMaxed)

    -- Try to get next job to avoid an extra roundtrip if the queue is not closing,
    -- and not rate limited and not paused!
    if (ARGV[6] == "1" and not isPausedOrMaxed) then
        local delayedKey = KEYS[7]

        -- Check if there are delayed jobs that can be promoted
        promoteDelayedJobs(delayedKey, markerKey, target, prioritizedKey, KEYS[4], prefixKey, timestamp, KEYS[10],
                          isPausedOrMaxed)

        local rateLimiterKey = KEYS[6]
        local streamEventsKey = KEYS[4]
        local maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])
        local expireTime = getRateLimitTTL(maxJobs, rateLimiterKey)

        if expireTime > 0 then
            return {0, 0, expireTime, 0}
        end

        return fetchNextJob(waitKey, activeKey, delayedKey, rateLimiterKey, streamEventsKey, prefixKey, opts, timestamp,
            markerKey, isPausedOrMaxed, maxJobs, KEYS, rateLimitedNextTtl, true)
    end

    return {0, 0, 0, rateLimitedNextTtl or 0}
else
    return -1
end
