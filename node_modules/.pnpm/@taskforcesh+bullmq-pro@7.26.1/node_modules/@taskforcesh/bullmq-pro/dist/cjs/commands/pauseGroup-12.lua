--[[
  Pauses or resumes a group globably.

   Input:
      KEYS[1]  wait key
      KEYS[2]  group key
      KEYS[3]  groups key
      KEYS[4]  paused groups key
      KEYS[5]  group rate limit key
      KEYS[6]  groups rate limit key
      KEYS[7]  groups max key
      KEYS[8]  marker key
      KEYS[9]  meta key
      KEYS[10] paused key
      KEYS[11] active key
      KEYS[12] events stream key

      ARGV[1] groupId
      ARGV[2] '1' resume or '0' pause
      ARGV[3] timestamp

    Event:
      publish paused or resumed event.
]]
local rcall = redis.call

-- Includes
--- @include "<base>/includes/addBaseMarkerIfNeeded"
--- @include "<base>/includes/getTargetQueueList"
--- @include "includes/reinsertGroupIfNeeded"

if ARGV[2] == '1' then
  if rcall("ZREM", KEYS[4], ARGV[1]) == 1 then
    -- Is group rate limited?
    local jobCounter = tonumber(rcall("GET", KEYS[5]))
    local isRateLimited = jobCounter and jobCounter >= 999999
    
    if not isRateLimited and rcall("ZSCORE", KEYS[7], ARGV[1]) == false then
      rcall("ZREM", KEYS[6], ARGV[1])
      local target, isPausedOrMaxed = getTargetQueueList(KEYS[9], KEYS[11], KEYS[1], KEYS[10])

      reinsertGroupIfNeeded(KEYS[2], KEYS[3], ARGV[1])
      addBaseMarkerIfNeeded(KEYS[8], isPausedOrMaxed)
    end

    rcall("XADD", KEYS[12], "*", "event", "groups:resumed", "groupId", ARGV[1]);
    return 0
  end

  return 1
end

if ARGV[2] == '0' then
  if rcall("ZADD", KEYS[4], ARGV[3], ARGV[1]) == 0 then
    return 1
  end

  if rcall("ZREM", KEYS[3], ARGV[1]) == 1 then
    rcall("XADD", KEYS[12], "*", "event", "groups:paused", "groupId", ARGV[1]);
  end
  
  return 0
end
